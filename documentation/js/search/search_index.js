var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.083,1,1.858]],["body/controllers/AppController.html",[0,1.801,1,3.09,2,1.481,3,0.536,4,0.461,5,0.461,6,3.374,7,0.652,8,0.039,9,0.983,10,2.646,11,3.374,12,0.536,13,0.027,14,2.897,15,1.816,16,0.032,17,0.032]],["title/modules/AppModule.html",[18,1.083,19,1.858]],["body/modules/AppModule.html",[1,2.906,2,1.497,3,0.402,4,0.346,5,0.346,7,0.706,8,0.039,9,0.737,10,2.659,11,2.529,12,0.402,13,0.02,16,0.027,17,0.027,18,1.694,19,3.619,20,1.361,21,1.361,22,1.691,23,1.691,24,1.228,25,2.58,26,1.691,27,2.529,28,2.529,29,2.529,30,2.659,31,2.971,32,2.392,33,2.28,34,1.691,35,1.514,36,3.072,37,2.568,38,3.072,39,2.172,40,3.072,41,2.529]],["title/injectables/AppService.html",[10,1.477,42,1.083]],["body/injectables/AppService.html",[3,0.516,4,0.444,5,0.444,7,0.516,8,0.039,9,0.947,10,2.4,12,0.516,13,0.026,16,0.032,17,0.032,42,1.76,43,2.173,44,3.25,45,0.849,46,2.4,47,5.516,48,1.166,49,3.947,50,1.945,51,1.592,52,1.945,53,3.947,54,3.947,55,2.447]],["title/controllers/AuthController.html",[0,1.083,56,1.858]],["body/controllers/AuthController.html",[0,1.446,2,1.446,3,0.524,4,0.451,5,0.451,7,0.695,8,0.039,9,0.96,12,0.524,13,0.026,14,2.829,15,1.774,16,0.032,17,0.032,56,3.045,57,3.295,58,2.829,59,3.295,60,2.356,61,3.295,62,2.829,63,1.774,64,4.003,65,4.003]],["title/modules/AuthModule.html",[18,1.083,30,1.477]],["body/modules/AuthModule.html",[2,1.577,3,0.434,4,0.374,5,0.374,7,0.677,8,0.039,9,0.797,12,0.434,13,0.021,16,0.028,17,0.028,18,1.761,20,1.472,21,1.472,22,1.828,23,1.828,24,1.328,25,2.683,26,2.683,30,2.771,32,1.934,33,2.402,34,1.828,35,1.636,37,2.059,39,2.348,56,3.021,60,2.619,61,2.735,66,2.735,67,2.735,68,2.735,69,3.322,70,2.705,71,3.322]],["title/injectables/AuthService.html",[42,1.083,60,1.329]],["body/injectables/AuthService.html",[3,0.391,4,0.336,5,0.336,7,0.532,8,0.039,9,0.716,12,0.391,13,0.019,15,1.324,16,0.026,17,0.026,42,1.469,43,1.644,45,0.642,46,2.002,48,1.364,50,2.002,51,1.867,52,2.002,60,1.801,70,1.851,72,2.459,73,2.946,74,4.083,75,4.064,76,2.519,77,2.459,78,2.19,79,2.987,80,2.237,81,2.237,82,1.2,83,1.469,84,2.987,85,2.987,86,4.064,87,3.803,88,2.543,89,2.987,90,2.987,91,2.459,92,2.459,93,2.459,94,1.851,95,2.459,96,1.194,97,2.987,98,2.987,99,2.459]],["title/classes/CreatePostDto.html",[13,0.019,100,1.65]],["body/classes/CreatePostDto.html",[3,0.165,4,0.142,5,0.142,7,0.496,8,0.039,12,0.165,13,0.017,16,0.014,17,0.014,45,0.271,48,1.336,51,1.678,63,0.558,82,1.533,83,1.752,99,2.891,100,1.157,101,0.558,102,3.285,103,0.889,104,1.199,105,3.124,106,2.705,107,2.705,108,3.475,109,2.705,110,2.705,111,4.027,112,1.912,113,3.158,114,2.891,115,2.005,116,3.512,117,3.725,118,2.101,119,2.114,120,1.858,121,1.258,122,1.258,123,2.101,124,2.101,125,1.258,126,1.258,127,1.958,128,1.258,129,3.512,130,1.73,131,1.73,132,2.101,133,1.258,134,1.258,135,1.258,136,2.101,137,3.158,138,2.983,139,1.302,140,1.73,141,1.258,142,1.258,143,3.158,144,2.101,145,2.101,146,2.101,147,1.258,148,1.258,149,2.101,150,2.101,151,1.258,152,2.101,153,2.101,154,2.101,155,2.227,156,1.302,157,1.73,158,1.258,159,1.258,160,1.73,161,1.258,162,3.158,163,3.158,164,1.73,165,2.101,166,2.101,167,2.101,168,2.101,169,2.101,170,2.558,171,2.705,172,1.258,173,2.891,174,2.227,175,1.73,176,1.258,177,1.258,178,1.036,179,2.101,180,1.73,181,1.258,182,3.124,183,1.258,184,1.258,185,1.73,186,2.101,187,1.302,188,1.258,189,1.258,190,1.258,191,1.258,192,1.036,193,1.258,194,2.482,195,2.177,196,1.036,197,2.847,198,2.101,199,2.101,200,2.101,201,2.705,202,2.101,203,0.62,204,0.889,205,0.693,206,1.485,207,1.258,208,2.891,209,3.315,210,1.036,211,1.485,212,0.889,213,0.889,214,0.889,215,0.889,216,1.258,217,1.258,218,2.101,219,1.036,220,1.258,221,1.258,222,1.036,223,1.258,224,2.101,225,1.258,226,1.258,227,1.036,228,1.258,229,1.258,230,1.258,231,1.036,232,1.036,233,1.036,234,1.912,235,1.036,236,1.036,237,1.258,238,1.036,239,1.258]],["title/classes/CreatePostMetaOptionDto.html",[13,0.019,127,1.858]],["body/classes/CreatePostMetaOptionDto.html",[3,0.475,4,0.409,5,0.409,7,0.475,8,0.038,12,0.475,13,0.03,16,0.03,17,0.03,45,0.781,48,1.365,51,1.51,82,1.365,101,1.609,102,3.594,104,2.048,115,2.048,120,2.033,127,2.865,138,3.594,194,3.267,195,3.318,203,1.789,206,3.594,234,3.594,240,2.989,241,3.63,242,3.63,243,3.63]],["title/classes/CreateUserDto.html",[13,0.019,244,1.65]],["body/classes/CreateUserDto.html",[3,0.361,4,0.31,5,0.31,7,0.361,8,0.038,12,0.361,13,0.025,16,0.025,17,0.025,45,0.593,48,1.415,51,1.786,82,1.415,83,1.39,87,4.15,101,1.222,104,1.704,115,2.124,164,3.166,192,2.269,194,3.563,195,2.746,196,2.269,197,2.719,203,1.358,231,3.166,244,2.117,245,3.563,246,2.269,247,3.647,248,4.429,249,4.429,250,2.757,251,2.757,252,2.757,253,2.757,254,2.757,255,2.757,256,2.757,257,4.793,258,3.846,259,3.846,260,3.846,261,3.691,262,3.846,263,2.117,264,3.846,265,3.846,266,3.846,267,3.846,268,3.846,269,2.757,270,2.757,271,3.846,272,3.846,273,2.757]],["title/classes/GetUserParamsDto.html",[13,0.019,274,1.65]],["body/classes/GetUserParamsDto.html",[3,0.426,4,0.367,5,0.367,7,0.631,8,0.039,12,0.426,13,0.031,16,0.028,17,0.028,45,0.701,48,0.962,51,1.065,63,1.444,82,1.426,83,1.557,88,3.021,96,2.054,101,1.444,104,1.91,115,1.444,119,1.303,156,2.02,170,2.372,197,3.046,203,1.605,204,2.303,209,3.547,263,3.021,274,2.372,275,3.547,276,2.683,277,3.259,278,3.259,279,3.259,280,3.547,281,3.259,282,2.303,283,2.683,284,2.683,285,2.02,286,3.259,287,2.683,288,3.259,289,2.02,290,3.259]],["title/classes/PatchPostDto.html",[13,0.019,291,1.858]],["body/classes/PatchPostDto.html",[3,0.393,4,0.339,5,0.339,7,0.701,8,0.039,12,0.393,13,0.026,16,0.026,17,0.026,45,0.647,48,0.888,63,1.333,82,1.369,88,3.02,100,2.248,101,1.333,103,2.126,104,2.055,115,1.333,119,1.633,120,1.633,160,2.476,170,1.656,195,2.531,203,1.482,205,1.656,208,3.362,211,2.126,213,2.126,261,2.887,263,2.248,280,3.362,285,2.531,291,2.874,292,3.362,293,3.362,294,4.084,295,3.008,296,3.008,297,3.362,298,3.277,299,3.277,300,2.476,301,4.084,302,2.126,303,2.476,304,3.008,305,3.008,306,3.008,307,3.008,308,3.008,309,3.008,310,3.008,311,3.008,312,3.008]],["title/controllers/PostsController.html",[0,1.083,313,1.858]],["body/controllers/PostsController.html",[0,0.888,2,0.888,3,0.321,4,0.277,5,0.277,7,0.631,8,0.039,9,0.589,12,0.321,13,0.016,14,1.737,15,1.089,16,0.023,17,0.023,45,0.528,46,1.746,48,1.228,50,2.048,51,1.487,52,1.746,58,1.737,62,1.737,63,1.089,73,2.975,80,2.289,81,2.289,82,1.228,83,1.503,100,2.768,112,1.737,115,1.843,117,2.918,119,1.417,120,1.93,180,2.023,187,2.197,205,1.951,215,1.737,291,2.822,300,2.918,313,2.197,314,2.023,315,2.918,316,3.544,317,3.544,318,2.457,319,2.457,320,2.457,321,2.918,322,2.918,323,3.544,324,2.457,325,2.457,326,2.457,327,3.544,328,2.457,329,2.918,330,2.457,331,2.939,332,2.457,333,2.457,334,2.023,335,2.048,336,2.023,337,2.918,338,2.918,339,2.457,340,2.457,341,2.457,342,2.457,343,2.457,344,2.457,345,2.023,346,2.457,347,2.457,348,2.023,349,2.457,350,2.457,351,2.457]],["title/modules/PostsModule.html",[18,1.083,31,1.65]],["body/modules/PostsModule.html",[2,1.504,3,0.405,4,0.348,5,0.348,7,0.687,8,0.038,9,0.742,12,0.615,13,0.02,16,0.027,17,0.027,18,1.954,20,1.371,21,1.371,22,1.703,23,1.703,24,1.237,25,2.59,26,1.703,31,3.093,32,2.397,33,2.292,34,1.703,35,1.524,37,2.581,39,2.187,55,1.918,96,1.665,212,2.942,282,2.187,289,1.918,313,2.916,335,2.664,336,2.547,352,2.547,353,2.547,354,3.094,355,3.094,356,3.094,357,3.094,358,3.325,359,4.704,360,2.547,361,3.094,362,3.094]],["title/injectables/PostsService.html",[42,1.083,335,1.477]],["body/injectables/PostsService.html",[3,0.399,4,0.343,5,0.343,7,0.539,8,0.039,9,0.731,12,0.399,13,0.02,15,1.352,16,0.027,17,0.027,42,1.49,43,1.679,45,0.656,46,2.031,48,1.217,50,1.503,51,1.526,52,1.503,73,2.571,76,2.556,77,2.511,78,2.153,80,2.27,81,2.27,82,1.217,83,1.49,92,2.511,94,1.891,96,2,105,4.118,114,3.394,120,2,329,2.511,335,2.031,358,2.156,363,2.511,364,4.123,365,3.05,366,4.123,367,3.05,368,2.511,369,3.05,370,3.05,371,4.118,372,4.123]],["title/classes/UserPatchDto.html",[13,0.019,373,1.858]],["body/classes/UserPatchDto.html",[3,0.459,4,0.395,5,0.395,7,0.592,8,0.038,12,0.459,13,0.023,16,0.029,17,0.029,55,2.177,83,1.269,96,2.114,101,1.556,156,2.177,205,2.491,211,2.482,214,2.482,244,1.933,245,2.482,285,2.805,289,2.177,293,3.725,297,3.725,298,3.198,299,3.198,302,3.198,303,3.725,331,3.198,360,2.891,373,2.805,374,2.891,375,4.525,376,2.891,377,4.525,378,3.512,379,2.891,380,3.512,381,3.512,382,3.512,383,3.512,384,2.482,385,2.891,386,3.512]],["title/injectables/UserService.html",[42,1.083,78,1.199]],["body/injectables/UserService.html",[3,0.3,4,0.258,5,0.258,7,0.523,8,0.04,9,0.55,12,0.3,13,0.026,15,1.016,16,0.022,17,0.022,42,1.218,43,1.262,45,0.493,46,1.661,48,1.18,50,1.661,51,1.534,52,1.661,59,1.888,60,2.248,70,1.421,73,2.702,74,2.775,76,2.089,78,1.348,80,2.2,81,2.793,82,1.18,83,1.444,88,2.584,91,1.888,93,1.888,94,1.421,95,1.888,96,2.029,119,0.917,139,2.731,247,3.627,263,2.793,274,2.702,387,1.888,388,3.371,389,2.775,390,3.371,391,2.775,392,3.371,393,3.997,394,3.371,395,2.293,396,2.293,397,2.293,398,3.627,399,2.293,400,3.371,401,3.371,402,2.293,403,2.775,404,3.371,405,1.888,406,1.888,407,2.293,408,2.293,409,2.293,410,2.293,411,3.997,412,2.293,413,3.371,414,2.293]],["title/controllers/UsersController.html",[0,1.083,415,1.858]],["body/controllers/UsersController.html",[0,0.416,2,0.416,3,0.15,4,0.13,5,0.13,7,0.474,8,0.039,9,0.276,12,0.15,13,0.016,15,0.51,16,0.013,17,0.013,24,0.46,45,0.247,46,0.96,48,1.14,50,1.903,51,1.723,52,2.157,58,0.813,62,0.813,63,0.51,73,2.88,76,0.713,78,1.013,80,1.995,81,2.235,82,1.293,83,1.468,88,1.642,94,0.713,96,1.886,112,0.813,115,1.711,119,1.449,120,1.013,130,2.456,131,2.747,139,2.517,155,1.604,156,2.247,157,2.087,170,1.642,178,2.087,182,0.947,187,1.571,205,0.633,210,0.947,212,0.813,213,1.377,214,2.562,215,2.562,234,0.813,236,2.984,238,0.947,244,2.48,261,1.377,263,2.764,274,2.329,282,0.813,284,2.456,287,2.456,289,1.571,315,2.087,321,1.604,322,0.947,331,2.108,334,2.984,337,1.604,338,1.604,345,0.947,348,0.947,358,1.377,368,0.947,373,2.247,376,0.947,379,1.604,391,0.947,398,4.021,403,2.087,405,0.947,406,0.947,415,1.208,416,0.947,417,3.337,418,2.534,419,2.534,420,1.948,421,2.983,422,2.534,423,1.948,424,1.151,425,3.337,426,3.337,427,1.151,428,1.151,429,4.617,430,1.948,431,1.151,432,1.948,433,1.151,434,2.983,435,1.948,436,1.151,437,1.151,438,1.948,439,1.151,440,1.151,441,1.151,442,1.151,443,2.983,444,1.151,445,1.151,446,1.948,447,1.151,448,1.948,449,1.151,450,1.151,451,1.151,452,2.983,453,1.151,454,1.948,455,1.948,456,1.151,457,0.947,458,2.534,459,1.151,460,1.151,461,1.151,462,1.151,463,1.151,464,1.151,465,1.948,466,1.948,467,1.151,468,1.151,469,1.151,470,1.151,471,1.151,472,1.151,473,1.948,474,1.151,475,1.151,476,1.151,477,1.151,478,1.151,479,3.337,480,1.151,481,1.151,482,1.151,483,1.151,484,1.151,485,1.151,486,1.151,487,1.948,488,1.151,489,1.151,490,1.151,491,1.151,492,1.151,493,1.151,494,1.948,495,1.151,496,1.151,497,1.151,498,1.151,499,1.151,500,1.151,501,1.151,502,1.151,503,1.151,504,1.151,505,1.151,506,1.151]],["title/modules/UsersModule.html",[18,1.083,32,1.329]],["body/modules/UsersModule.html",[2,1.577,3,0.434,4,0.374,5,0.374,7,0.677,8,0.039,9,0.797,12,0.434,13,0.021,16,0.028,17,0.028,18,1.761,20,1.472,21,1.472,22,1.828,23,1.828,24,1.328,25,2.683,26,2.683,30,2.15,32,2.492,33,2.402,34,1.828,35,1.636,37,2.059,41,2.735,70,2.705,78,2.363,415,3.021,457,2.735,507,2.735,508,2.735,509,2.735,510,3.322,511,3.322]],["title/coverage.html",[512,2.88]],["body/coverage.html",[0,1.787,1,1.839,5,0.334,6,2.442,8,0.039,10,1.461,13,0.035,16,0.026,17,0.026,24,1.186,42,1.787,44,2.442,56,1.839,57,2.442,60,1.314,72,2.442,78,1.186,82,0.876,96,1.186,100,1.633,102,2.859,103,2.859,120,1.186,127,1.839,187,1.839,206,2.097,235,2.442,240,2.442,244,1.633,245,2.859,246,2.442,274,1.633,275,2.442,276,2.442,291,1.839,292,2.442,313,1.839,314,2.442,335,1.461,363,2.442,373,1.839,374,2.442,387,2.442,389,2.442,415,1.839,416,2.442,512,2.097,513,2.442,514,2.966,515,5.878,516,4.945,517,4.603,518,4.045,519,2.442,520,2.966,521,4.045,522,2.966,523,2.966,524,2.966,525,2.966,526,2.966,527,2.966]],["title/dependencies.html",[21,1.596,384,1.775]],["body/dependencies.html",[8,0.039,9,0.947,13,0.032,16,0.032,17,0.032,21,1.749,63,1.749,203,1.945,204,2.79,298,2.79,299,2.79,528,3.947,529,3.947,530,5.283,531,3.947,532,3.947,533,3.947,534,3.947,535,3.947,536,3.947,537,3.947,538,3.947,539,3.947,540,3.947,541,3.947,542,3.947]],["title/miscellaneous/enumerations.html",[543,1.557,544,2.965]],["body/miscellaneous/enumerations.html",[8,0.039,16,0.031,17,0.031,45,0.823,108,3.932,120,1.91,138,4.151,139,2.961,140,3.932,173,3.932,174,3.932,175,3.932,219,3.932,222,3.932,543,2.371,544,3.148,545,3.824,546,3.824,547,3.824,548,4.776,549,3.824]],["title/miscellaneous/functions.html",[543,1.557,550,2.965]],["body/miscellaneous/functions.html",[8,0.034,16,0.034,17,0.034,24,2.241,45,0.974,519,3.73,543,2.808,550,3.73,551,4.53]],["title/index.html",[45,0.54,552,2.512,553,2.512]],["body/index.html",[4,0.271,8,0.037,16,0.023,17,0.023,35,2.222,55,2.549,119,0.963,170,2.263,185,1.983,227,3.942,232,1.983,233,3.713,283,1.983,285,1.493,302,2.47,371,2.876,385,4.241,512,1.703,513,1.983,554,2.409,555,2.409,556,4.111,557,2.409,558,2.409,559,2.409,560,2.409,561,2.409,562,2.409,563,2.409,564,2.409,565,2.409,566,4.51,567,2.409,568,2.409,569,5.152,570,2.409,571,2.409,572,3.494,573,2.409,574,2.409,575,2.409,576,4.111,577,2.409,578,2.409,579,2.409,580,2.409,581,3.494,582,2.409,583,2.409,584,2.409,585,3.494,586,2.409,587,4.111,588,2.409,589,3.713,590,3.494,591,2.409,592,2.409,593,2.409,594,2.409,595,2.409,596,2.409,597,4.111,598,2.409,599,2.409,600,2.409,601,4.111,602,2.409,603,2.409,604,2.409,605,2.409,606,2.409,607,2.409,608,2.409,609,4.111,610,2.409,611,2.409,612,2.409,613,2.409,614,2.409,615,3.494,616,2.409,617,2.409,618,2.409,619,2.409,620,2.409,621,2.409,622,3.494,623,2.409,624,2.409,625,2.409,626,3.494,627,3.494,628,2.409,629,2.409,630,2.409,631,2.409,632,2.409,633,2.409,634,2.409,635,2.409,636,2.409,637,2.409,638,1.983,639,2.409,640,2.409,641,2.409,642,2.409,643,2.409,644,2.409,645,1.983]],["title/modules.html",[20,1.806]],["body/modules.html",[8,0.033,16,0.033,17,0.033,19,2.628,20,1.879,30,2.089,31,2.334,32,1.879,589,4.653,646,5.652,647,5.652,648,5.652]],["title/overview.html",[649,3.355]],["body/overview.html",[2,1.139,8,0.038,10,2.339,16,0.027,17,0.027,18,1.139,19,3.578,20,1.396,21,1.396,22,1.735,23,1.735,24,1.26,25,1.735,26,1.735,27,2.594,28,2.594,29,2.594,30,2.678,31,3.056,32,2.46,33,2.32,34,1.735,35,1.552,43,1.735,60,2.46,66,2.594,67,2.594,68,2.594,78,2.22,101,1.396,335,2.339,352,2.594,353,2.594,507,2.594,508,2.594,509,2.594,649,2.594,650,4.748,651,3.151]],["title/properties.html",[104,1.596,384,1.775]],["body/properties.html",[8,0.038,16,0.034,17,0.034,104,1.976,119,1.783,638,3.672,645,3.672,652,4.46,653,4.46,654,4.46]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UserPatchDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":515,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":653,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":537,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":540,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":536,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":516,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":517,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":518,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":526,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":529,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":484,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":530,"title":{},"body":{"dependencies.html":{}}}],["1232",{"_index":414,"title":{},"body":{"injectables/UserService.html":{}}}],["16t08:45:32+0000",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":372,"title":{},"body":{"injectables/PostsService.html":{}}}],["2.0.5",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["2024",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3/4",{"_index":525,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":650,"title":{},"body":{"overview.html":{}}}],["5",{"_index":464,"title":{},"body":{"controllers/UsersController.html":{}}}],["5})@apiquery({name",{"_index":447,"title":{},"body":{"controllers/UsersController.html":{}}}],["6",{"_index":651,"title":{},"body":{"overview.html":{}}}],["64",{"_index":281,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["64'})@isoptional()@isint()@type(undefined",{"_index":278,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["7.3.0",{"_index":535,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":542,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":524,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["add",{"_index":489,"title":{},"body":{"controllers/UsersController.html":{}}}],["again",{"_index":383,"title":{},"body":{"classes/UserPatchDto.html":{}}}],["allow",{"_index":361,"title":{},"body":{"modules/PostsModule.html":{}}}],["along",{"_index":306,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["always",{"_index":357,"title":{},"body":{"modules/PostsModule.html":{}}}],["amazing",{"_index":632,"title":{},"body":{"index.html":{}}}],["api",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apipropertyoptional",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{}}}],["apipropertyoptional({description",{"_index":277,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["apipropertyoptional({example",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({type",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":458,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('posts",{"_index":342,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":460,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":601,"title":{},"body":{"index.html":{}}}],["applications",{"_index":562,"title":{},"body":{"index.html":{}}}],["applicaton",{"_index":463,"title":{},"body":{"controllers/UsersController.html":{}}}],["applicaton'})@apiresponse({status",{"_index":444,"title":{},"body":{"controllers/UsersController.html":{}}}],["applies",{"_index":493,"title":{},"body":{"controllers/UsersController.html":{}}}],["apply",{"_index":483,"title":{},"body":{"controllers/UsersController.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["auth.controller",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["auth/provider/auth.service",{"_index":407,"title":{},"body":{"injectables/UserService.html":{}}}],["authcontroller",{"_index":56,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":638,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":60,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["aws",{"_index":602,"title":{},"body":{"index.html":{}}}],["backers",{"_index":633,"title":{},"body":{"index.html":{}}}],["below",{"_index":305,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["blog",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":625,"title":{},"body":{"index.html":{}}}],["body",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["body(new",{"_index":488,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":648,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":646,"title":{},"body":{"modules.html":{}}}],["building",{"_index":557,"title":{},"body":{"index.html":{}}}],["business",{"_index":391,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["channel",{"_index":592,"title":{},"body":{"index.html":{}}}],["character",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/UserPatchDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UserPatchDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":101,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/UserPatchDto.html":{},"overview.html":{}}}],["clicks",{"_index":604,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":66,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":352,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":354,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":353,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":507,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":508,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":509,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["coding",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["come",{"_index":283,"title":{},"body":{"classes/GetUserParamsDto.html":{},"index.html":{}}}],["compodoc/compodoc",{"_index":528,"title":{},"body":{"dependencies.html":{}}}],["connect",{"_index":388,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(body",{"_index":496,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(createpostdto",{"_index":347,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(createuserdto",{"_index":500,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(getuserdtoparam",{"_index":486,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(getuserparamsdto",{"_index":409,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(headers",{"_index":497,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(ip",{"_index":498,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(params",{"_index":472,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(patchpostdto",{"_index":351,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(query",{"_index":473,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(typeof",{"_index":479,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(userid",{"_index":369,"title":{},"body":{"injectables/PostsService.html":{}}}],["console.log(userpatchdto",{"_index":506,"title":{},"body":{"controllers/UsersController.html":{}}}],["const",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["constructor(authservice",{"_index":395,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["constructor(userservice",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["contain",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["content",{"_index":105,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["content'})@isstring()@isoptional",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":341,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":459,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convert",{"_index":286,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["courses",{"_index":599,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":512,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["coz",{"_index":289,"title":{},"body":{"classes/GetUserParamsDto.html":{},"modules/PostsModule.html":{},"classes/UserPatchDto.html":{},"controllers/UsersController.html":{}}}],["create",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"classes/UserPatchDto.html":{},"controllers/UsersController.html":{}}}],["create.dto",{"_index":376,"title":{},"body":{"classes/UserPatchDto.html":{},"controllers/UsersController.html":{}}}],["create.dto.ts",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["create.dto.ts:18",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["create.dto.ts:24",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["create.dto.ts:29",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["create.dto.ts:36",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["created",{"_index":348,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["createpost",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["createpost(@body",{"_index":346,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createuserdto",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{}}}],["createpostdto",{"_index":100,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptiondto",{"_index":127,"title":{"classes/CreatePostMetaOptionDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":244,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UserPatchDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["data",{"_index":380,"title":{},"body":{"classes/UserPatchDto.html":{}}}],["database",{"_index":400,"title":{},"body":{"injectables/UserService.html":{}}}],["date",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":594,"title":{},"body":{"index.html":{}}}],["default",{"_index":282,"title":{},"body":{"classes/GetUserParamsDto.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{}}}],["defaultvaluepipe",{"_index":453,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":468,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":466,"title":{},"body":{"controllers/UsersController.html":{}}}],["define",{"_index":290,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["defined",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":600,"title":{},"body":{"index.html":{}}}],["description",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":404,"title":{},"body":{"injectables/UserService.html":{}}}],["development",{"_index":570,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":611,"title":{},"body":{"index.html":{}}}],["discord",{"_index":591,"title":{},"body":{"index.html":{}}}],["dive",{"_index":593,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":513,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":411,"title":{},"body":{"injectables/UserService.html":{}}}],["doe@example.com",{"_index":413,"title":{},"body":{"injectables/UserService.html":{}}}],["draft",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["draft''})@isenum(poststatus)@isnotempty",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto",{"_index":379,"title":{},"body":{"classes/UserPatchDto.html":{},"controllers/UsersController.html":{}}}],["dtos/create",{"_index":339,"title":{},"body":{"controllers/PostsController.html":{}}}],["dtos/get",{"_index":405,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/patch",{"_index":340,"title":{},"body":{"controllers/PostsController.html":{}}}],["dtos/user",{"_index":455,"title":{},"body":{"controllers/UsersController.html":{}}}],["e2e",{"_index":578,"title":{},"body":{"index.html":{}}}],["each",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["efficient",{"_index":558,"title":{},"body":{"index.html":{}}}],["email",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["enable",{"_index":503,"title":{},"body":{"controllers/UsersController.html":{}}}],["enterprise",{"_index":614,"title":{},"body":{"index.html":{}}}],["enum",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":544,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/posttype.enum",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["err",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["example",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["experience",{"_index":596,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UserPatchDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":293,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/UserPatchDto.html":{}}}],["false",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["featuredimageurl",{"_index":106,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["few",{"_index":581,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UserPatchDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["findallusers",{"_index":393,"title":{},"body":{"injectables/UserService.html":{}}}],["findallusers(getuserparamsdto",{"_index":397,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneuser",{"_index":394,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneuser(id",{"_index":401,"title":{},"body":{"injectables/UserService.html":{}}}],["firstname",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["fixed",{"_index":309,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["follow",{"_index":618,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["framework",{"_index":556,"title":{},"body":{"index.html":{}}}],["full",{"_index":613,"title":{},"body":{"index.html":{}}}],["function",{"_index":520,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":550,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/more/single/:id/:option",{"_index":435,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':userid",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('dto/:id",{"_index":430,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('service/:id",{"_index":462,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('service/:id?')@apioperation({summary",{"_index":442,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('single/:id/:option",{"_index":438,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallposts",{"_index":364,"title":{},"body":{"injectables/PostsService.html":{}}}],["getallposts(userid",{"_index":366,"title":{},"body":{"injectables/PostsService.html":{}}}],["getdtoparam",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["getdtoparam(getuserdtoparam",{"_index":428,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":47,"title":{},"body":{"injectables/AppService.html":{}}}],["getmorespecificdataofsingleusers",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{}}}],["getmorespecificdataofsingleusers(id",{"_index":433,"title":{},"body":{"controllers/UsersController.html":{}}}],["getpostbyuserid",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyuserid(@param('userid",{"_index":343,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyuserid(userid",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{}}}],["getsingleusers",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{}}}],["getsingleusers(@param",{"_index":471,"title":{},"body":{"controllers/UsersController.html":{}}}],["getsingleusers(params",{"_index":437,"title":{},"body":{"controllers/UsersController.html":{}}}],["getting",{"_index":552,"title":{"index.html":{}},"body":{}}],["getuserdtoparam",{"_index":432,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserparamsdto",{"_index":274,"title":{"classes/GetUserParamsDto.html":{}},"body":{"classes/GetUserParamsDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["getusers",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserservice",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserservice(getuserparamsdto",{"_index":441,"title":{},"body":{"controllers/UsersController.html":{}}}],["global",{"_index":494,"title":{},"body":{"controllers/UsersController.html":{}}}],["graph",{"_index":606,"title":{},"body":{"index.html":{}}}],["grow",{"_index":629,"title":{},"body":{"index.html":{}}}],["hands",{"_index":595,"title":{},"body":{"index.html":{}}}],["handy",{"_index":583,"title":{},"body":{"index.html":{}}}],["headers",{"_index":425,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":53,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":302,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/UserPatchDto.html":{},"index.html":{}}}],["here",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["http",{"_index":491,"title":{},"body":{"controllers/UsersController.html":{}}}],["http://localhost.com/images/img1.jpg",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":642,"title":{},"body":{"index.html":{}}}],["https:\\/\\/schema.org\\\",\\r\\n",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\\\/\\\\/schema.org\\\\\",\\\\r\\\\n",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["identifier",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["image",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UserPatchDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":45,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UserPatchDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["inherit",{"_index":303,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/UserPatchDto.html":{}}}],["inject",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":42,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":43,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":368,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["installcompile",{"_index":568,"title":{},"body":{"index.html":{}}}],["instance",{"_index":499,"title":{},"body":{"controllers/UsersController.html":{}}}],["instanceof",{"_index":501,"title":{},"body":{"controllers/UsersController.html":{}}}],["instants",{"_index":502,"title":{},"body":{"controllers/UsersController.html":{}}}],["instead",{"_index":311,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["interact",{"_index":607,"title":{},"body":{"index.html":{}}}],["ip",{"_index":426,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["isemail",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":280,"title":{},"body":{"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{}}}],["isstring",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isemail()@isnotempty",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":241,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(99",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(99",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@matches(/^(?=.*[a",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":622,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":624,"title":{},"body":{"index.html":{}}}],["john",{"_index":410,"title":{},"body":{"injectables/UserService.html":{}}}],["john@example.com",{"_index":412,"title":{},"body":{"injectables/UserService.html":{}}}],["join",{"_index":635,"title":{},"body":{"index.html":{}}}],["js",{"_index":360,"title":{},"body":{"modules/PostsModule.html":{},"classes/UserPatchDto.html":{}}}],["json",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":639,"title":{},"body":{"index.html":{}}}],["key",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"controllers/UsersController.html":{}}}],["lastname",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["learn",{"_index":586,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["letter",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":645,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":627,"title":{},"body":{"index.html":{}}}],["limit",{"_index":398,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["linkedin",{"_index":620,"title":{},"body":{"index.html":{}}}],["logic",{"_index":461,"title":{},"body":{"controllers/UsersController.html":{}}}],["login",{"_index":75,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(username",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{}}}],["long",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["looking",{"_index":621,"title":{},"body":{"index.html":{}}}],["loop",{"_index":616,"title":{},"body":{"index.html":{}}}],["mapped",{"_index":377,"title":{},"body":{"classes/UserPatchDto.html":{}}}],["matches",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UserPatchDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":603,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(99",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mean",{"_index":470,"title":{},"body":{"controllers/UsersController.html":{}}}],["message",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["metadata",{"_index":539,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["method",{"_index":495,"title":{},"body":{"controllers/UsersController.html":{}}}],["methods",{"_index":46,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["minlength",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["miscellaneous",{"_index":543,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":626,"title":{},"body":{"index.html":{}}}],["mode",{"_index":572,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":587,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":640,"title":{},"body":{"index.html":{}}}],["n",{"_index":474,"title":{},"body":{"controllers/UsersController.html":{}}}],["name",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["need",{"_index":285,"title":{},"body":{"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/UserPatchDto.html":{},"index.html":{}}}],["nest",{"_index":55,"title":{},"body":{"injectables/AppService.html":{},"modules/PostsModule.html":{},"classes/UserPatchDto.html":{},"index.html":{}}}],["nest/swagger",{"_index":310,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nestframework",{"_index":644,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":531,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":298,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/UserPatchDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":555,"title":{},"body":{"index.html":{}}}],["non",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["note",{"_index":480,"title":{},"body":{"controllers/UsersController.html":{}}}],["npm",{"_index":385,"title":{},"body":{"classes/UserPatchDto.html":{},"index.html":{}}}],["number",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["object",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["offer",{"_index":623,"title":{},"body":{"index.html":{}}}],["official",{"_index":597,"title":{},"body":{"index.html":{}}}],["offset",{"_index":434,"title":{},"body":{"controllers/UsersController.html":{}}}],["once",{"_index":382,"title":{},"body":{"classes/UserPatchDto.html":{}}}],["open",{"_index":628,"title":{},"body":{"index.html":{}}}],["operations",{"_index":392,"title":{},"body":{"injectables/UserService.html":{}}}],["option",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["optional",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UserPatchDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["optoin.dto",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optoin.dto.ts",{"_index":240,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["optoin.dto.ts:5",{"_index":242,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["optoin.dto.ts:8",{"_index":243,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":649,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":384,"title":{"dependencies.html":{},"properties.html":{}},"body":{"classes/UserPatchDto.html":{}}}],["page",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":334,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":476,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('option",{"_index":477,"title":{},"body":{"controllers/UsersController.html":{}}}],["param.dto",{"_index":406,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["param.dto.ts",{"_index":276,"title":{},"body":{"classes/GetUserParamsDto.html":{},"coverage.html":{}}}],["param.dto.ts:9",{"_index":279,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["parameters",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["params",{"_index":284,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":452,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":612,"title":{},"body":{"index.html":{}}}],["partial",{"_index":301,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype",{"_index":297,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/UserPatchDto.html":{}}}],["partialtype(createpostdto",{"_index":294,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":375,"title":{},"body":{"classes/UserPatchDto.html":{}}}],["particular",{"_index":490,"title":{},"body":{"controllers/UsersController.html":{}}}],["pass",{"_index":481,"title":{},"body":{"controllers/UsersController.html":{}}}],["password",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{},"classes/UserPatchDto.html":{},"controllers/UsersController.html":{}}}],["patch.dto",{"_index":456,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch.dto.ts",{"_index":374,"title":{},"body":{"classes/UserPatchDto.html":{},"coverage.html":{}}}],["patchpostdto",{"_index":291,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchpostdto:patchpostdto",{"_index":350,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuser",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":505,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(userpatchdto",{"_index":450,"title":{},"body":{"controllers/UsersController.html":{}}}],["per",{"_index":446,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":390,"title":{},"body":{"injectables/UserService.html":{}}}],["person",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pipe",{"_index":287,"title":{},"body":{"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{}}}],["pips",{"_index":492,"title":{},"body":{"controllers/UsersController.html":{}}}],["please",{"_index":590,"title":{},"body":{"index.html":{}}}],["port",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["position",{"_index":448,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isoptional()@isurl",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@isnotempty",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@post",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.dto",{"_index":300,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":103,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:102",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:128",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:16",{"_index":296,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:28",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:36",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:48",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:56",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:64",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:74",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:82",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:90",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posted",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["posts.controller",{"_index":356,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":313,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":335,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["problem",{"_index":307,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["production",{"_index":574,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":554,"title":{},"body":{"index.html":{}}}],["project",{"_index":566,"title":{},"body":{"index.html":{}}}],["properties",{"_index":104,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["property",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/UserPatchDto.html":{}}}],["provider",{"_index":359,"title":{},"body":{"modules/PostsModule.html":{}}}],["provider/auth.service",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["provider/posts.service",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/user.service",{"_index":457,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":73,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["published",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published'})@isiso8601()@isoptional",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":109,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":429,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":465,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('offset",{"_index":478,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":467,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":588,"title":{},"body":{"index.html":{}}}],["r\\\\n",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["r\\n",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":636,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["real",{"_index":608,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":538,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":443,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":565,"title":{},"body":{"index.html":{}}}],["req",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UserPatchDto.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":582,"title":{},"body":{"index.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UserPatchDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["returns",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["review",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["run",{"_index":569,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":541,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scalable",{"_index":559,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":548,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["see",{"_index":362,"title":{},"body":{"modules/PostsModule.html":{}}}],["seen",{"_index":304,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["send",{"_index":485,"title":{},"body":{"controllers/UsersController.html":{}}}],["separately",{"_index":475,"title":{},"body":{"controllers/UsersController.html":{}}}],["serialize",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":560,"title":{},"body":{"index.html":{}}}],["service",{"_index":358,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["setup",{"_index":567,"title":{},"body":{"index.html":{}}}],["show",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{}}}],["side",{"_index":561,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":487,"title":{},"body":{"controllers/UsersController.html":{}}}],["single",{"_index":403,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["slug",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UserPatchDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["spaces",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sponsors",{"_index":631,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":551,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":545,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":546,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":44,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":49,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module.ts",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/provider/auth.service.ts",{"_index":72,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/provider/auth.service.ts:10",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/provider/auth.service.ts:15",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/provider/auth.service.ts:5",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":519,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":102,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":292,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":547,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":549,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:13",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:25",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:31",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":355,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/provider/posts.service.ts",{"_index":363,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/provider/posts.service.ts:10",{"_index":367,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/provider/posts.service.ts:5",{"_index":365,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/get",{"_index":275,"title":{},"body":{"classes/GetUserParamsDto.html":{},"coverage.html":{}}}],["src/users/dtos/user",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserPatchDto.html":{},"coverage.html":{}}}],["src/users/providers/user.service.ts",{"_index":387,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/user.service.ts:18",{"_index":399,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:40",{"_index":402,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:9",{"_index":396,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.controller.ts",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:114",{"_index":451,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:30",{"_index":440,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:57",{"_index":449,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:67",{"_index":439,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:74",{"_index":436,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:88",{"_index":431,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:98",{"_index":427,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":510,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["start:dev",{"_index":573,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":575,"title":{},"body":{"index.html":{}}}],["started",{"_index":553,"title":{"index.html":{}},"body":{}}],["starter",{"_index":564,"title":{},"body":{"index.html":{}}}],["statements",{"_index":514,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":615,"title":{},"body":{"index.html":{}}}],["still",{"_index":482,"title":{},"body":{"controllers/UsersController.html":{}}}],["story",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["successfully",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["suitable",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["summary",{"_index":345,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":589,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":647,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":308,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["table",{"_index":389,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":527,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tags'})@isoptional()@isarray()@minlength(3",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["test",{"_index":371,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["test:covresources",{"_index":580,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":579,"title":{},"body":{"index.html":{}}}],["tests",{"_index":576,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":630,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":408,"title":{},"body":{"injectables/UserService.html":{}}}],["this.postsservice.getallposts(userid",{"_index":344,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.userservice.findallusers(getuserparamsdto",{"_index":469,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findoneuser(id",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findoneuser(userid",{"_index":370,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["thrown'})@isoptional()@isjson",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":609,"title":{},"body":{"index.html":{}}}],["title",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["touch",{"_index":637,"title":{},"body":{"index.html":{}}}],["transformation",{"_index":504,"title":{},"body":{"controllers/UsersController.html":{}}}],["transformer",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"dependencies.html":{}}}],["true",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@isstring({each",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":643,"title":{},"body":{"index.html":{}}}],["type",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["types",{"_index":299,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/UserPatchDto.html":{},"dependencies.html":{}}}],["types@2.0.5",{"_index":386,"title":{},"body":{"classes/UserPatchDto.html":{}}}],["typescript",{"_index":563,"title":{},"body":{"index.html":{}}}],["typs",{"_index":378,"title":{},"body":{"classes/UserPatchDto.html":{}}}],["undefined",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":577,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":654,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":312,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updated'})@isnotempty()@isint",{"_index":295,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatepost",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":349,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":617,"title":{},"body":{"index.html":{}}}],["url",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["url''})@isstring()@isnotempty()@matches(/^[a",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["use",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UserPatchDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["user'})@apiquery({name",{"_index":445,"title":{},"body":{"controllers/UsersController.html":{}}}],["userid",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{}}}],["userpatchdto",{"_index":373,"title":{"classes/UserPatchDto.html":{}},"body":{"classes/UserPatchDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["users",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":511,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/providers/user.service",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["userscontroller",{"_index":415,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":78,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["uses",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["using",{"_index":610,"title":{},"body":{"index.html":{}}}],["validatenested",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"classes/UserPatchDto.html":{},"controllers/UsersController.html":{}}}],["validationpipe",{"_index":454,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"miscellaneous/enumerations.html":{}}}],["version",{"_index":652,"title":{},"body":{"properties.html":{}}}],["video",{"_index":598,"title":{},"body":{"index.html":{}}}],["visit",{"_index":585,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":605,"title":{},"body":{"index.html":{}}}],["void",{"_index":333,"title":{},"body":{"controllers/PostsController.html":{}}}],["want",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":571,"title":{},"body":{"index.html":{}}}],["website",{"_index":641,"title":{},"body":{"index.html":{}}}],["without",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["work",{"_index":288,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["working",{"_index":584,"title":{},"body":{"index.html":{}}}],["world",{"_index":54,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":381,"title":{},"body":{"classes/UserPatchDto.html":{}}}],["x",{"_index":619,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":634,"title":{},"body":{"index.html":{}}}],["z0",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d@$!%*?&]{8",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) { }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World from Nest!'\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './provider/auth.service';\nimport {ApiTags} from '@nestjs/swagger';\n\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController {\n\tconstructor(private readonly AuthService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './provider/auth.service';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/provider/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(UserService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/provider/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        UserService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/provider/auth.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(username: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/provider/auth.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, forwardRef } from '@nestjs/common';\nimport { UserService } from '../../users/providers/user.service';\n\n@Injectable()\nexport class AuthService {\n\tconstructor(\n\t\t@Inject(forwardRef(() => UserService))\n\t\tprivate readonly UserService: UserService,\n\t) {}\n\tpublic login(username: string, password: string, id: string) {\n\t\tconst user = this.UserService.findOneUser(id);\n\t\treturn 'SAMPLE_TOKEN';\n\t}\n\n\tpublic isAuth() {\n\t\treturn true;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Blog port content', description: 'This is for post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'http://localhost.com/images/img1.jpg', description: 'Image for blog post'})@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible value, 'post', 'page', story', 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: '2024-03-16T08:45:32+0000', description: 'Date of blog post published'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\",\\r\\n \\\"@type\\\": \\\"Person\\\" \\r\\n}', description: 'Serialize your JSON object else a validation err will be thrown'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'my-blog-post', description: 'Slug like 'my-url''})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'Possible value, 'published', 'review', draft''})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: undefined, description: 'array of suitable posts tags'})@IsOptional()@IsArray()@MinLength(3, {each: true})@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'How start coding', description: 'This is the title of new blog post'})@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PostType } from '../enums/postType.enum';\nimport { postStatus } from '../enums/postStatus.enum';\nimport {\n\tMatches,\n\tIsEnum,\n\tIsString,\n\tIsNotEmpty,\n\tMinLength,\n\tIsOptional,\n\tIsJSON,\n\tIsUrl,\n\tIsISO8601,\n\tIsArray,\n\tValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { CreatePostMetaOptionDto } from './create-post-meta-optoin.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nexport class CreatePostDto {\n\t// api property use to show req body property but only non optional\n\t@ApiProperty({\n\t\texample: 'How start coding',\n\t\tdescription: 'This is the title of new blog post',\n\t})\n\t@IsString()\n\t@MinLength(4)\n\t@IsNotEmpty()\n\ttitle: string;\n\n\t@ApiProperty({\n\t\tenum: PostType,\n\t\tdescription: \"Possible value, 'post', 'page', story', 'series'\",\n\t})\n\t@IsEnum(PostType)\n\t@IsNotEmpty()\n\tpostType: PostType;\n\n\t@ApiProperty({\n\t\texample: 'my-blog-post',\n\t\tdescription: \"Slug like 'my-url'\",\n\t})\n\t@IsString()\n\t@IsNotEmpty()\n\t@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n\t\tmessage:\n\t\t\t'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n\t})\n\tslug: string;\n\n\t@ApiProperty({\n\t\tenum: postStatus,\n\t\tdescription: \"Possible value, 'published', 'review', draft'\",\n\t})\n\t@IsEnum(postStatus)\n\t@IsNotEmpty()\n\tstatus: postStatus;\n\n\t@ApiPropertyOptional({\n\t\texample: 'Blog port content',\n\t\tdescription: 'This is for post content',\n\t})\n\t@IsString()\n\t@IsOptional()\n\tcontent?: string;\n\n\t@ApiPropertyOptional({\n\t\texample:\n\t\t\t'{\\\\r\\\\n \\\\\"@context\\\\\": \\\\\"https:\\\\/\\\\/schema.org\\\\\",\\\\r\\\\n \\\\\"@type\\\\\": \\\\\"Person\\\\\" \\\\r\\\\n}',\n\t\tdescription:\n\t\t\t'Serialize your JSON object else a validation err will be thrown',\n\t})\n\t@IsOptional()\n\t@IsJSON()\n\tschema?: string;\n\n\t@ApiPropertyOptional({\n\t\texample: 'http://localhost.com/images/img1.jpg',\n\t\tdescription: 'Image for blog post',\n\t})\n\t@IsOptional()\n\t@IsUrl()\n\tfeaturedImageUrl?: string;\n\n\t@ApiPropertyOptional({\n\t\texample: '2024-03-16T08:45:32+0000',\n\t\tdescription: 'Date of blog post published',\n\t})\n\t@IsISO8601()\n\t@IsOptional()\n\tpublishOn?: Date;\n\n\t@ApiPropertyOptional({\n\t\texample: ['nestjs', 'code'],\n\t\tdescription: 'array of suitable posts tags',\n\t})\n\t@IsOptional()\n\t@IsArray()\n\t//each value of string is length is 3 or not\n\t@MinLength(3, { each: true })\n\t// here is string check each array value is string or not\n\t@IsString({ each: true })\n\ttags?: string[];\n\n\t@ApiPropertyOptional({\n\t\ttype: 'array',\n\t\trequired: false,\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tkey: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'the key can be any string identifier for your meta option',\n\t\t\t\t\texample: 'sidebarEnabled',\n\t\t\t\t},\n\t\t\t\tvalue: {\n\t\t\t\t\ttype: 'any',\n\t\t\t\t\tdescription: 'Any value that you want to save to the key',\n\t\t\t\t\texample: true,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@IsOptional()\n\t@IsArray()\n\t@ValidateNested({ each: true })\n\t@Type(() => CreatePostMetaOptionDto)\n\tmetaOptions?: CreatePostMetaOptionDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionDto.html":{"url":"classes/CreatePostMetaOptionDto.html","title":"class - CreatePostMetaOptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-optoin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-optoin.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-optoin.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\nexport class CreatePostMetaOptionDto {\n\t@IsString()\n\t@IsNotEmpty()\n\tkey: string;\n\n\t@IsNotEmpty()\n\tvalue: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/user-create.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user-create.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(99)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user-create.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(99)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user-create.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, {message: 'Password must contain at least 1 letter, 1 number, 1 special character, and be at least 8 characters long.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/user-create.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n\tIsNotEmpty,\n\tIsString,\n\tMaxLength,\n\tMinLength,\n\tIsOptional,\n\tIsEmail,\n\tMatches,\n} from 'class-validator';\n\nexport class CreateUserDto {\n\t@IsString()\n\t@IsNotEmpty()\n\t@MinLength(3)\n\t@MaxLength(99)\n\tfirstName: string;\n\n\t@IsString()\n\t@IsOptional()\n\t@MinLength(3)\n\t@MaxLength(99)\n\tlastName?: string;\n\n\t@IsString()\n\t@IsEmail()\n\t@IsNotEmpty()\n\temail: string;\n\n\t@IsString()\n\t@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, {\n\t\tmessage:\n\t\t\t'Password must contain at least 1 letter, 1 number, 1 special character, and be at least 8 characters long.',\n\t})\n\tpassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserParamsDto.html":{"url":"classes/GetUserParamsDto.html","title":"class - GetUserParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-user-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user by id', example: '64'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-user-param.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nexport class GetUserParamsDto {\n\t@ApiPropertyOptional({ description: 'Get user by id', example: '64' })\n\t@IsOptional()\n\t@IsInt()\n\t@Type(() => Number) // by default number come as a string in params so need to convert it number then validation pipe work coz we define id as a number\n\tid?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '1', description: 'Post id that need to be updated'})@IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\n// import { PartialType } from '@nestjs/mapped-types';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\n// Partial type we import from nestjs/mapped-types which help to inherit properties as we seen below patchPostDto have all property of CreatePostDto along with id.\n// but the problem is on swagger we only show id.. so to fixed this we import Partial Type from nest/swagger instead of nestjs/mapped-types.\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n\t@ApiProperty({\n\t\texample: '1',\n\t\tdescription: 'Post id that need to be updated',\n\t})\n\t@IsNotEmpty()\n\t@IsInt()\n\tid: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPostByUserId\n                            \n                            \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create New Blog Post'})@ApiResponse({status: 200, description: 'Successfully posted post'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPostByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostByUserId(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Get, Param, Body, Patch } from '@nestjs/common';\nimport { PostsService } from './provider/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('posts')\nexport class PostsController {\n\tconstructor(private readonly PostsService: PostsService) {}\n\n\t@Get(':userId?')\n\tpublic getPostByUserId(@Param('userId') userId: string) {\n\t\treturn this.PostsService.getAllPosts(userId);\n\t}\n\n\t@ApiOperation({\n\t\tsummary: 'Create New Blog Post',\n\t})\n\t@ApiResponse({\n\t\tstatus: 200,\n\t\tdescription: 'Successfully posted post',\n\t})\n\t@Post()\n\tpublic createPost(@Body() createPostDto: CreatePostDto) {\n\t\tconsole.log(createPostDto);\n\t\treturn \"Post Created\"\n\t}\n\n\t@Patch()\n\tpublic  updatePost(@Body() patchPostDto:PatchPostDto){\n\t\t\tconsole.log(patchPostDto);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './provider/posts.service';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  // we always import module, to use its service provider. by default nest js allow us to use only provider or service coz we export only provider or service in user module, see user module export\n  imports: [UsersModule]\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/provider/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getAllPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(UserService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/provider/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        UserService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPosts(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/provider/posts.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UserService } from '../../users/providers/user.service';\n\n@Injectable()\nexport class PostsService {\n\tconstructor(\n\t\t// injecting user service\n\t\tprivate readonly UserService: UserService,\n\t) {}\n\tpublic getAllPosts(userId: string) {\n\t\tconsole.log(userId);\n\t\tlet user = this.UserService.findOneUser(userId);\n\t\treturn [\n\t\t\t{\n\t\t\t\tuser,\n\t\t\t\ttitle: 'test post',\n\t\t\t\tcontent: 'test post content',\n\t\t\t},\n\t\t\t{\n\t\t\t\tuser,\n\t\t\t\ttitle: 'test post 2',\n\t\t\t\tcontent: 'test post content 2',\n\t\t\t},\n\t\t];\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserPatchDto.html":{"url":"classes/UserPatchDto.html","title":"class - UserPatchDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserPatchDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/user-patch.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './user-create.dto';\n\n// mapped-typs PartialType help to inherit all property of user dto coz in patch req we need create user data..\n// so no need to write user create validation once again for patch with optional you just inherit it with the help of mapped types (nest js package)\n//npm i @nestjs/mapped-types@2.0.5\nexport class UserPatchDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to User table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAllUsers\n                            \n                            \n                                    Public\n                                findOneUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(AuthService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        AuthService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsers(GetUserParamsDto: GetUserParamsDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:18\n                        \n                    \n\n\n            \n                \n                        Get all the user from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                GetUserParamsDto\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneUser(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Get single user details by its id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; name: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUserParamsDto } from '../dtos/get-user-param.dto';\nimport { AuthService } from '../../auth/provider/auth.service';\n\n/**\n * Class to connect to User table and perform business operations\n */\n@Injectable()\nexport class UserService {\n\tconstructor(\n\t\t@Inject(forwardRef(() => AuthService))\n\t\tprivate readonly AuthService: AuthService,\n\t) {}\n\n\t/**\n\t * Get all the user from the database\n\t */\n\tpublic findAllUsers(\n\t\tGetUserParamsDto: GetUserParamsDto,\n\t\tlimit: number,\n\t\tpage: number,\n\t) {\n\t\tconst isAuth = this.AuthService.isAuth();\n\t\tconsole.log(GetUserParamsDto, limit, page, 'is auth', isAuth);\n\t\treturn [\n\t\t\t{\n\t\t\t\tname: 'John Doe',\n\t\t\t\temail: 'john@example.com',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Doe',\n\t\t\t\temail: 'doe@example.com',\n\t\t\t},\n\t\t];\n\t}\n\n\t/**\n\t * Get single user details by its id\n\t */\n\tpublic findOneUser(id: string) {\n\t\treturn {\n\t\t\tid: 1232,\n\t\t\tname: 'Doe',\n\t\t\temail: 'doe@example.com',\n\t\t};\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getDtoParam\n                            \n                            \n                                    \n                                    Public\n                                getMoreSpecificDataOfSingleUsers\n                            \n                            \n                                    \n                                    Public\n                                getSingleUsers\n                            \n                            \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUserService\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createUserDto: CreateUserDto, headers: any, ip: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getDtoParam\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDtoParam(getUserDtoParam: GetUserParamsDto, query: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('dto/:id?')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserDtoParam\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getMoreSpecificDataOfSingleUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMoreSpecificDataOfSingleUsers(id: string, option: number | undefined, limit: string, offset: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/more/single/:id/:option?')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                option\n                                            \n                                                        number | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                offset\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getSingleUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSingleUsers(params: any, query: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('single/:id/:option?')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUserService\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserService(GetUserParamsDto: GetUserParamsDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('service/:id?')@ApiOperation({summary: 'Get the register user of the applicaton'})@ApiResponse({status: 200, description: 'Get the register user'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of user limit return per query', example: 5})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number of user', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                GetUserParamsDto\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(userPatchDto: UserPatchDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userPatchDto\n                                            \n                                                            UserPatchDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n\tController,\n\tGet,\n\tParam,\n\tPost,\n\tQuery,\n\tBody,\n\tHeaders,\n\tIp,\n\tParseIntPipe,\n\tDefaultValuePipe,\n\tValidationPipe,\n\tPatch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/user-create.dto';\nimport { GetUserParamsDto } from './dtos/get-user-param.dto';\nimport { UserPatchDto } from './dtos/user-patch.dto';\nimport { UserService } from './providers/user.service';\nimport { ApiTags, ApiQuery, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('users')\nexport class UsersController {\n\tconstructor(\n\t\t// injecting user service\n\t\tprivate readonly UserService: UserService,\n\t) {}\n\n\t@Get()\n\tpublic getUsers(): string {\n\t\treturn 'Get all users';\n\t}\n\n\t// use service for business logic\n\t@Get('service/:id?')\n\t@ApiOperation({\n\t\tsummary: 'Get the register user of the applicaton',\n\t})\n\t@ApiResponse({\n\t\tstatus: 200,\n\t\tdescription: 'Get the register user',\n\t})\n\t@ApiQuery({\n\t\tname: 'limit',\n\t\ttype: 'number',\n\t\trequired: false,\n\t\tdescription: 'The number of user limit return per query',\n\t\texample: 5,\n\t})\n\t@ApiQuery({\n\t\tname: 'page',\n\t\ttype: 'number',\n\t\trequired: false,\n\t\tdescription: 'The position of the page number of user',\n\t\texample: 1,\n\t})\n\tpublic getUserService(\n\t\t@Param() GetUserParamsDto: GetUserParamsDto,\n\t\t@Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n\t\t@Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n\t) {\n\t\treturn this.UserService.findAllUsers(GetUserParamsDto, limit, page);\n\t}\n\n\t// ? mean id is optional api not show err\n\t@Get('single/:id/:option?')\n\tpublic getSingleUsers(@Param() params: any, @Query() query: any): string {\n\t\tconsole.log(params);\n\t\tconsole.log(query);\n\t\treturn 'Get single users';\n\t}\n\t// get each params n query separately\n\t@Get('/more/single/:id/:option?')\n\tpublic getMoreSpecificDataOfSingleUsers(\n\t\t@Param('id') id: string,\n\t\t@Param('option', ParseIntPipe) option: number | undefined,\n\t\t@Query('limit', new DefaultValuePipe(10)) limit: string,\n\t\t@Query('offset') offset: string,\n\t): string {\n\t\tconsole.log(typeof id);\n\t\tconsole.log(typeof option); //Note: we get err if we get option param as a string, but if we not pass option key coz its optional param so it still show validation err coz validation pipe only apply on req params\n\t\tconsole.log(typeof limit, limit); // default, we get limit 10, if user not send a limit param\n\t\tconsole.log(typeof offset);\n\t\treturn 'Get single users';\n\t}\n\n\t@Get('dto/:id?')\n\tpublic getDtoParam(\n\t\t@Param() getUserDtoParam: GetUserParamsDto,\n\t\t@Query() query: any,\n\t): string {\n\t\tconsole.log(getUserDtoParam);\n\t\tconsole.log(query);\n\t\treturn 'Get single users';\n\t}\n\n\t@Post()\n\tpublic createPost(\n\t\t// @Body() body: any, // simple body req\n\t\t// @Body(new ValidationPipe()) createUserDto: CreateUserDto, // add validation pipe on particular http req\n\t\t@Body() createUserDto: CreateUserDto, // validation pips applies global on every req on bootstrap method.\n\t\t@Headers() headers: any,\n\t\t@Ip() ip: any,\n\t): string {\n\t\t// console.log(body); // simple body req\n\t\t// console.log(headers);\n\t\t// console.log(ip);\n\t\tconsole.log(typeof createUserDto); // but create user dto is not instance of CreateUserDto class.\n\t\tconsole.log(createUserDto instanceof CreateUserDto); // return false coz its object.. but if you want to req object must be instants of you DTO class, enable transformation in validation pipe/ global validation pipe\n\t\treturn 'user created successfully';\n\t}\n\n\t@Patch()\n\tpublic patchUser(@Body() userPatchDto: UserPatchDto): string {\n\t\tconsole.log(userPatchDto);\n\t\treturn 'patch user';\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserService } from './providers/user.service';\nimport { AuthModule } from '../auth/auth.module';\n\n@Module({\n\tcontrollers: [UsersController],\n\tproviders: [UserService],\n\texports: [UserService],\n\timports: [forwardRef(() => AuthModule)],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/provider/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-optoin.dto.ts\n            \n            class\n            CreatePostMetaOptionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/provider/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/get-user-param.dto.ts\n            \n            class\n            GetUserParamsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/user-create.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/user-patch.dto.ts\n            \n            class\n            UserPatchDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/user.service.ts\n            \n            injectable\n            UserService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            PostType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
